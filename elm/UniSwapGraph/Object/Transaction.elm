-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module UniSwapGraph.Object.Transaction exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import UniSwapGraph.Enum.Burn_orderBy
import UniSwapGraph.Enum.Mint_orderBy
import UniSwapGraph.Enum.OrderDirection
import UniSwapGraph.Enum.Swap_orderBy
import UniSwapGraph.InputObject
import UniSwapGraph.Interface
import UniSwapGraph.Object
import UniSwapGraph.Scalar
import UniSwapGraph.ScalarCodecs
import UniSwapGraph.Union


id : SelectionSet UniSwapGraph.ScalarCodecs.Id UniSwapGraph.Object.Transaction
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (UniSwapGraph.ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecId |> .decoder)


blockNumber : SelectionSet UniSwapGraph.ScalarCodecs.BigInt UniSwapGraph.Object.Transaction
blockNumber =
    Object.selectionForField "ScalarCodecs.BigInt" "blockNumber" [] (UniSwapGraph.ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigInt |> .decoder)


timestamp : SelectionSet UniSwapGraph.ScalarCodecs.BigInt UniSwapGraph.Object.Transaction
timestamp =
    Object.selectionForField "ScalarCodecs.BigInt" "timestamp" [] (UniSwapGraph.ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigInt |> .decoder)


type alias MintsOptionalArguments =
    { skip : OptionalArgument Int
    , first : OptionalArgument Int
    , orderBy : OptionalArgument UniSwapGraph.Enum.Mint_orderBy.Mint_orderBy
    , orderDirection : OptionalArgument UniSwapGraph.Enum.OrderDirection.OrderDirection
    , where_ : OptionalArgument UniSwapGraph.InputObject.Mint_filter
    }


mints :
    (MintsOptionalArguments -> MintsOptionalArguments)
    -> SelectionSet decodesTo UniSwapGraph.Object.Mint
    -> SelectionSet (List (Maybe decodesTo)) UniSwapGraph.Object.Transaction
mints fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { skip = Absent, first = Absent, orderBy = Absent, orderDirection = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum UniSwapGraph.Enum.Mint_orderBy.toString), Argument.optional "orderDirection" filledInOptionals.orderDirection (Encode.enum UniSwapGraph.Enum.OrderDirection.toString), Argument.optional "where" filledInOptionals.where_ UniSwapGraph.InputObject.encodeMint_filter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "mints" optionalArgs object_ (identity >> Decode.nullable >> Decode.list)


type alias BurnsOptionalArguments =
    { skip : OptionalArgument Int
    , first : OptionalArgument Int
    , orderBy : OptionalArgument UniSwapGraph.Enum.Burn_orderBy.Burn_orderBy
    , orderDirection : OptionalArgument UniSwapGraph.Enum.OrderDirection.OrderDirection
    , where_ : OptionalArgument UniSwapGraph.InputObject.Burn_filter
    }


burns :
    (BurnsOptionalArguments -> BurnsOptionalArguments)
    -> SelectionSet decodesTo UniSwapGraph.Object.Burn
    -> SelectionSet (List (Maybe decodesTo)) UniSwapGraph.Object.Transaction
burns fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { skip = Absent, first = Absent, orderBy = Absent, orderDirection = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum UniSwapGraph.Enum.Burn_orderBy.toString), Argument.optional "orderDirection" filledInOptionals.orderDirection (Encode.enum UniSwapGraph.Enum.OrderDirection.toString), Argument.optional "where" filledInOptionals.where_ UniSwapGraph.InputObject.encodeBurn_filter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "burns" optionalArgs object_ (identity >> Decode.nullable >> Decode.list)


type alias SwapsOptionalArguments =
    { skip : OptionalArgument Int
    , first : OptionalArgument Int
    , orderBy : OptionalArgument UniSwapGraph.Enum.Swap_orderBy.Swap_orderBy
    , orderDirection : OptionalArgument UniSwapGraph.Enum.OrderDirection.OrderDirection
    , where_ : OptionalArgument UniSwapGraph.InputObject.Swap_filter
    }


swaps :
    (SwapsOptionalArguments -> SwapsOptionalArguments)
    -> SelectionSet decodesTo UniSwapGraph.Object.Swap
    -> SelectionSet (List (Maybe decodesTo)) UniSwapGraph.Object.Transaction
swaps fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { skip = Absent, first = Absent, orderBy = Absent, orderDirection = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum UniSwapGraph.Enum.Swap_orderBy.toString), Argument.optional "orderDirection" filledInOptionals.orderDirection (Encode.enum UniSwapGraph.Enum.OrderDirection.toString), Argument.optional "where" filledInOptionals.where_ UniSwapGraph.InputObject.encodeSwap_filter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "swaps" optionalArgs object_ (identity >> Decode.nullable >> Decode.list)
