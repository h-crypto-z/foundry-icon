-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module UniSwapGraph.Object.Burn exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import ScalarCodecs
import UniSwapGraph.InputObject
import UniSwapGraph.Interface
import UniSwapGraph.Object
import UniSwapGraph.Scalar
import UniSwapGraph.Union


id : SelectionSet ScalarCodecs.Id UniSwapGraph.Object.Burn
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecId |> .decoder)


transaction :
    SelectionSet decodesTo UniSwapGraph.Object.Transaction
    -> SelectionSet decodesTo UniSwapGraph.Object.Burn
transaction object_ =
    Object.selectionForCompositeField "transaction" [] object_ identity


timestamp : SelectionSet ScalarCodecs.BigInt UniSwapGraph.Object.Burn
timestamp =
    Object.selectionForField "ScalarCodecs.BigInt" "timestamp" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigInt |> .decoder)


pair :
    SelectionSet decodesTo UniSwapGraph.Object.Pair
    -> SelectionSet decodesTo UniSwapGraph.Object.Burn
pair object_ =
    Object.selectionForCompositeField "pair" [] object_ identity


liquidity : SelectionSet ScalarCodecs.BigDecimal UniSwapGraph.Object.Burn
liquidity =
    Object.selectionForField "ScalarCodecs.BigDecimal" "liquidity" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder)


sender : SelectionSet (Maybe ScalarCodecs.Bytes) UniSwapGraph.Object.Burn
sender =
    Object.selectionForField "(Maybe ScalarCodecs.Bytes)" "sender" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBytes |> .decoder |> Decode.nullable)


amount0 : SelectionSet (Maybe ScalarCodecs.BigDecimal) UniSwapGraph.Object.Burn
amount0 =
    Object.selectionForField "(Maybe ScalarCodecs.BigDecimal)" "amount0" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder |> Decode.nullable)


amount1 : SelectionSet (Maybe ScalarCodecs.BigDecimal) UniSwapGraph.Object.Burn
amount1 =
    Object.selectionForField "(Maybe ScalarCodecs.BigDecimal)" "amount1" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder |> Decode.nullable)


to : SelectionSet (Maybe ScalarCodecs.Bytes) UniSwapGraph.Object.Burn
to =
    Object.selectionForField "(Maybe ScalarCodecs.Bytes)" "to" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBytes |> .decoder |> Decode.nullable)


logIndex : SelectionSet (Maybe ScalarCodecs.BigInt) UniSwapGraph.Object.Burn
logIndex =
    Object.selectionForField "(Maybe ScalarCodecs.BigInt)" "logIndex" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigInt |> .decoder |> Decode.nullable)


amountUSD : SelectionSet (Maybe ScalarCodecs.BigDecimal) UniSwapGraph.Object.Burn
amountUSD =
    Object.selectionForField "(Maybe ScalarCodecs.BigDecimal)" "amountUSD" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder |> Decode.nullable)


needsComplete : SelectionSet Bool UniSwapGraph.Object.Burn
needsComplete =
    Object.selectionForField "Bool" "needsComplete" [] Decode.bool


feeTo : SelectionSet (Maybe ScalarCodecs.Bytes) UniSwapGraph.Object.Burn
feeTo =
    Object.selectionForField "(Maybe ScalarCodecs.Bytes)" "feeTo" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBytes |> .decoder |> Decode.nullable)


feeLiquidity : SelectionSet (Maybe ScalarCodecs.BigDecimal) UniSwapGraph.Object.Burn
feeLiquidity =
    Object.selectionForField "(Maybe ScalarCodecs.BigDecimal)" "feeLiquidity" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder |> Decode.nullable)
