-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module UniSwapGraph.Object.TokenDayData exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import UniSwapGraph.Enum.OrderDirection
import UniSwapGraph.Enum.PairDayData_orderBy
import UniSwapGraph.InputObject
import UniSwapGraph.Interface
import UniSwapGraph.Object
import UniSwapGraph.Scalar
import UniSwapGraph.ScalarCodecs
import UniSwapGraph.Union


id : SelectionSet UniSwapGraph.ScalarCodecs.Id UniSwapGraph.Object.TokenDayData
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (UniSwapGraph.ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecId |> .decoder)


date : SelectionSet Int UniSwapGraph.Object.TokenDayData
date =
    Object.selectionForField "Int" "date" [] Decode.int


token :
    SelectionSet decodesTo UniSwapGraph.Object.Token
    -> SelectionSet decodesTo UniSwapGraph.Object.TokenDayData
token object_ =
    Object.selectionForCompositeField "token" [] object_ identity


dailyVolumeToken : SelectionSet UniSwapGraph.ScalarCodecs.BigDecimal UniSwapGraph.Object.TokenDayData
dailyVolumeToken =
    Object.selectionForField "ScalarCodecs.BigDecimal" "dailyVolumeToken" [] (UniSwapGraph.ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder)


dailyVolumeETH : SelectionSet UniSwapGraph.ScalarCodecs.BigDecimal UniSwapGraph.Object.TokenDayData
dailyVolumeETH =
    Object.selectionForField "ScalarCodecs.BigDecimal" "dailyVolumeETH" [] (UniSwapGraph.ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder)


dailyVolumeUSD : SelectionSet UniSwapGraph.ScalarCodecs.BigDecimal UniSwapGraph.Object.TokenDayData
dailyVolumeUSD =
    Object.selectionForField "ScalarCodecs.BigDecimal" "dailyVolumeUSD" [] (UniSwapGraph.ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder)


dailyTxns : SelectionSet UniSwapGraph.ScalarCodecs.BigInt UniSwapGraph.Object.TokenDayData
dailyTxns =
    Object.selectionForField "ScalarCodecs.BigInt" "dailyTxns" [] (UniSwapGraph.ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigInt |> .decoder)


totalLiquidityToken : SelectionSet UniSwapGraph.ScalarCodecs.BigDecimal UniSwapGraph.Object.TokenDayData
totalLiquidityToken =
    Object.selectionForField "ScalarCodecs.BigDecimal" "totalLiquidityToken" [] (UniSwapGraph.ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder)


totalLiquidityETH : SelectionSet UniSwapGraph.ScalarCodecs.BigDecimal UniSwapGraph.Object.TokenDayData
totalLiquidityETH =
    Object.selectionForField "ScalarCodecs.BigDecimal" "totalLiquidityETH" [] (UniSwapGraph.ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder)


totalLiquidityUSD : SelectionSet UniSwapGraph.ScalarCodecs.BigDecimal UniSwapGraph.Object.TokenDayData
totalLiquidityUSD =
    Object.selectionForField "ScalarCodecs.BigDecimal" "totalLiquidityUSD" [] (UniSwapGraph.ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder)


priceUSD : SelectionSet UniSwapGraph.ScalarCodecs.BigDecimal UniSwapGraph.Object.TokenDayData
priceUSD =
    Object.selectionForField "ScalarCodecs.BigDecimal" "priceUSD" [] (UniSwapGraph.ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder)


maxStored : SelectionSet Int UniSwapGraph.Object.TokenDayData
maxStored =
    Object.selectionForField "Int" "maxStored" [] Decode.int


type alias MostLiquidPairsOptionalArguments =
    { skip : OptionalArgument Int
    , first : OptionalArgument Int
    , orderBy : OptionalArgument UniSwapGraph.Enum.PairDayData_orderBy.PairDayData_orderBy
    , orderDirection : OptionalArgument UniSwapGraph.Enum.OrderDirection.OrderDirection
    , where_ : OptionalArgument UniSwapGraph.InputObject.PairDayData_filter
    }


mostLiquidPairs :
    (MostLiquidPairsOptionalArguments -> MostLiquidPairsOptionalArguments)
    -> SelectionSet decodesTo UniSwapGraph.Object.PairDayData
    -> SelectionSet (List decodesTo) UniSwapGraph.Object.TokenDayData
mostLiquidPairs fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { skip = Absent, first = Absent, orderBy = Absent, orderDirection = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum UniSwapGraph.Enum.PairDayData_orderBy.toString), Argument.optional "orderDirection" filledInOptionals.orderDirection (Encode.enum UniSwapGraph.Enum.OrderDirection.toString), Argument.optional "where" filledInOptionals.where_ UniSwapGraph.InputObject.encodePairDayData_filter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "mostLiquidPairs" optionalArgs object_ (identity >> Decode.list)
