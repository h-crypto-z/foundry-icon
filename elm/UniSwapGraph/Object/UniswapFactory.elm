-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module UniSwapGraph.Object.UniswapFactory exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import ScalarCodecs
import UniSwapGraph.Enum.OrderDirection
import UniSwapGraph.Enum.TokenDayData_orderBy
import UniSwapGraph.InputObject
import UniSwapGraph.Interface
import UniSwapGraph.Object
import UniSwapGraph.Scalar
import UniSwapGraph.Union


id : SelectionSet ScalarCodecs.Id UniSwapGraph.Object.UniswapFactory
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecId |> .decoder)


pairCount : SelectionSet Int UniSwapGraph.Object.UniswapFactory
pairCount =
    Object.selectionForField "Int" "pairCount" [] Decode.int


totalVolumeUSD : SelectionSet ScalarCodecs.BigDecimal UniSwapGraph.Object.UniswapFactory
totalVolumeUSD =
    Object.selectionForField "ScalarCodecs.BigDecimal" "totalVolumeUSD" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder)


totalVolumeETH : SelectionSet ScalarCodecs.BigDecimal UniSwapGraph.Object.UniswapFactory
totalVolumeETH =
    Object.selectionForField "ScalarCodecs.BigDecimal" "totalVolumeETH" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder)


untrackedVolumeUSD : SelectionSet ScalarCodecs.BigDecimal UniSwapGraph.Object.UniswapFactory
untrackedVolumeUSD =
    Object.selectionForField "ScalarCodecs.BigDecimal" "untrackedVolumeUSD" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder)


totalLiquidityUSD : SelectionSet ScalarCodecs.BigDecimal UniSwapGraph.Object.UniswapFactory
totalLiquidityUSD =
    Object.selectionForField "ScalarCodecs.BigDecimal" "totalLiquidityUSD" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder)


totalLiquidityETH : SelectionSet ScalarCodecs.BigDecimal UniSwapGraph.Object.UniswapFactory
totalLiquidityETH =
    Object.selectionForField "ScalarCodecs.BigDecimal" "totalLiquidityETH" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder)


txCount : SelectionSet ScalarCodecs.BigInt UniSwapGraph.Object.UniswapFactory
txCount =
    Object.selectionForField "ScalarCodecs.BigInt" "txCount" [] (ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigInt |> .decoder)


type alias MostLiquidTokensOptionalArguments =
    { skip : OptionalArgument Int
    , first : OptionalArgument Int
    , orderBy : OptionalArgument UniSwapGraph.Enum.TokenDayData_orderBy.TokenDayData_orderBy
    , orderDirection : OptionalArgument UniSwapGraph.Enum.OrderDirection.OrderDirection
    , where_ : OptionalArgument UniSwapGraph.InputObject.TokenDayData_filter
    }


mostLiquidTokens :
    (MostLiquidTokensOptionalArguments -> MostLiquidTokensOptionalArguments)
    -> SelectionSet decodesTo UniSwapGraph.Object.TokenDayData
    -> SelectionSet (List decodesTo) UniSwapGraph.Object.UniswapFactory
mostLiquidTokens fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { skip = Absent, first = Absent, orderBy = Absent, orderDirection = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum UniSwapGraph.Enum.TokenDayData_orderBy.toString), Argument.optional "orderDirection" filledInOptionals.orderDirection (Encode.enum UniSwapGraph.Enum.OrderDirection.toString), Argument.optional "where" filledInOptionals.where_ UniSwapGraph.InputObject.encodeTokenDayData_filter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "mostLiquidTokens" optionalArgs object_ (identity >> Decode.list)
