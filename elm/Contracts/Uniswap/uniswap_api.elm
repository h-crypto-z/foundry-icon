module Contracts.uniswap_api exposing
    ( PairCreated
    , allPairs
    , allPairsLength
    , createPair
    , feeTo
    , feeToSetter
    , getPair
    , pairCreatedDecoder
    , pairCreatedEvent
    , setFeeTo
    , setFeeToSetter
    )

import Eth.Abi.Decode as D exposing (abiDecode, andMap, data, toElmDecoder, topic)
import Eth.Abi.Encode as E exposing (Encoding(..), abiEncode)
import BigInt exposing (BigInt)
import Eth.Types exposing (..)
import Eth.Utils as U
import Json.Decode as Decode exposing (Decoder, succeed)
import Json.Decode.Pipeline exposing (custom)



{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator v4.0.0
   Compatible with elm-ethereum v4.0.0

-}
-- allPairs(uint256) function


allPairs : Address -> BigInt -> Call Address
allPairs contractAddress a_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "1e3dd18b" [ E.uint a_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- allPairsLength() function


allPairsLength : Address -> Call BigInt
allPairsLength contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "574f2ba3" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }


-- createPair(address,address) function


createPair : Address -> Address -> Address -> Call Address
createPair contractAddress tokenA_ tokenB_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "c9c65396" [ E.address tokenA_, E.address tokenB_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- feeTo() function


feeTo : Address -> Call Address
feeTo contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "017e7e58" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- feeToSetter() function


feeToSetter : Address -> Call Address
feeToSetter contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "094b7415" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- getPair(address,address) function


getPair : Address -> Address -> Address -> Call Address
getPair contractAddress a_ b_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "e6a43905" [ E.address a_, E.address b_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- setFeeTo(address) function


setFeeTo : Address -> Address -> Call ()
setFeeTo contractAddress feeTo_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "f46901ed" [ E.address feeTo_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


-- setFeeToSetter(address) function


setFeeToSetter : Address -> Address -> Call ()
setFeeToSetter contractAddress feeToSetter_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "a2e74af6" [ E.address feeToSetter_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


-- PairCreated(address,address,address,uint256) event


type alias PairCreated =
    { token0 : Address
    , token1 : Address
    , pair : Address
    , v3 : BigInt
    }


pairCreatedEvent : Address -> Maybe Address -> Maybe Address -> LogFilter
pairCreatedEvent contractAddress token0_ token1_ = 
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = 
        [ Just <| U.unsafeToHex "0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9"
        , Maybe.map (abiEncode << E.address) token0_
        , Maybe.map (abiEncode << E.address) token1_
        ]
    }


pairCreatedDecoder : Decoder PairCreated
pairCreatedDecoder = 
    Decode.succeed PairCreated
        |> custom (topic 1 D.address)
        |> custom (topic 2 D.address)
        |> custom (data 0 D.address)
        |> custom (data 1 D.uint)


