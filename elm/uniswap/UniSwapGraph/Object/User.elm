-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module UniSwapGraph.Object.User exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import UniSwapGraph.Enum.LiquidityPosition_orderBy
import UniSwapGraph.Enum.OrderDirection
import UniSwapGraph.InputObject
import UniSwapGraph.Interface
import UniSwapGraph.Object
import UniSwapGraph.Scalar
import UniSwapGraph.ScalarCodecs
import UniSwapGraph.Union


id : SelectionSet UniSwapGraph.ScalarCodecs.Id UniSwapGraph.Object.User
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (UniSwapGraph.ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecId |> .decoder)


type alias LiquidityPositionsOptionalArguments =
    { skip : OptionalArgument Int
    , first : OptionalArgument Int
    , orderBy : OptionalArgument UniSwapGraph.Enum.LiquidityPosition_orderBy.LiquidityPosition_orderBy
    , orderDirection : OptionalArgument UniSwapGraph.Enum.OrderDirection.OrderDirection
    , where_ : OptionalArgument UniSwapGraph.InputObject.LiquidityPosition_filter
    }


liquidityPositions :
    (LiquidityPositionsOptionalArguments -> LiquidityPositionsOptionalArguments)
    -> SelectionSet decodesTo UniSwapGraph.Object.LiquidityPosition
    -> SelectionSet (Maybe (List decodesTo)) UniSwapGraph.Object.User
liquidityPositions fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { skip = Absent, first = Absent, orderBy = Absent, orderDirection = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum UniSwapGraph.Enum.LiquidityPosition_orderBy.toString), Argument.optional "orderDirection" filledInOptionals.orderDirection (Encode.enum UniSwapGraph.Enum.OrderDirection.toString), Argument.optional "where" filledInOptionals.where_ UniSwapGraph.InputObject.encodeLiquidityPosition_filter ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "liquidityPositions" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


usdSwapped : SelectionSet UniSwapGraph.ScalarCodecs.BigDecimal UniSwapGraph.Object.User
usdSwapped =
    Object.selectionForField "ScalarCodecs.BigDecimal" "usdSwapped" [] (UniSwapGraph.ScalarCodecs.codecs |> UniSwapGraph.Scalar.unwrapCodecs |> .codecBigDecimal |> .decoder)
